{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useContext } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { STYLES } from \"../styles/styles\";\nimport AppButton from \"../components/AppButton\";\nimport AppTextInput from \"../components/AppTextInput\";\nimport api from \"../api/axiosConfig\";\nimport storeData from \"../asyncStorage/storeAsyncData\";\nimport removeAsyncData from \"../asyncStorage/removeAsyncData\";\nimport AppContext from \"../components/AppContext\";\nimport ActivityModal from \"../components/ActivityModal\";\n\nfunction LoginScreen() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      username = _useState2[0],\n      setUsername = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var Context = useContext(AppContext);\n\n  var getApiToken = function getApiToken(username, password) {\n    removeAsyncData(\"token\");\n    api({\n      method: \"post\",\n      url: \"/api/token-auth/\",\n      data: {\n        username: username,\n        password: password\n      }\n    }).then(function (response) {\n      storeData(\"token\", response.data[\"token\"]);\n      Context.setIsSignedIn(true);\n      Context.setActivityVisible(false);\n    }).catch(function (error) {\n      Context.setActivityVisible(false);\n      Context.setIsSignedIn(false);\n\n      if (error.response) {} else if (error.request) {} else {}\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.input\n  }, React.createElement(AppTextInput, {\n    title: \"username\",\n    placeholder: \"Email\",\n    onChangeText: function onChangeText(text) {\n      return setUsername(text);\n    },\n    textContentType: \"emailAddress\",\n    isValid: true,\n    autoCapitalize: \"none\",\n    clearButtonMode: \"always\"\n  })), React.createElement(View, {\n    style: styles.input\n  }, React.createElement(AppTextInput, {\n    title: \"password\",\n    placeholder: \"Password\",\n    onChangeText: function onChangeText(text) {\n      return setPassword(text);\n    },\n    textContentType: \"password\",\n    secureTextEntry: true,\n    isValid: true,\n    clearButtonMode: \"always\"\n  })), React.createElement(View, null, React.createElement(AppButton, {\n    title: \"Login\",\n    onPress: function onPress() {\n      getApiToken(username, password);\n      Context.setActivityVisible(true);\n    }\n  })), React.createElement(ActivityModal, {\n    visible: Context.activityVisibleValue\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    paddingTop: 300,\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"100%\"\n  },\n  input: {\n    width: \"80%\"\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["/Users/blake/react_native/d2lb/app/screens/LoginScreen.js"],"names":["React","useState","useContext","STYLES","AppButton","AppTextInput","api","storeData","removeAsyncData","AppContext","ActivityModal","LoginScreen","username","setUsername","password","setPassword","Context","getApiToken","method","url","data","then","response","setIsSignedIn","setActivityVisible","catch","error","request","styles","container","input","text","activityVisibleValue","StyleSheet","create","paddingTop","flexDirection","justifyContent","alignItems","width"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { STYLES } from \"../styles/styles\";\nimport AppButton from \"../components/AppButton\";\nimport AppTextInput from \"../components/AppTextInput\";\nimport api from \"../api/axiosConfig\";\nimport storeData from \"../asyncStorage/storeAsyncData\";\nimport removeAsyncData from \"../asyncStorage/removeAsyncData\";\nimport AppContext from \"../components/AppContext\";\nimport ActivityModal from \"../components/ActivityModal\";\n\nfunction LoginScreen() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const Context = useContext(AppContext);\n\n  const getApiToken = (username, password) => {\n    removeAsyncData(\"token\");\n\n    api({\n      method: \"post\",\n      url: \"/api/token-auth/\",\n      data: {\n        username: username,\n        password: password,\n      },\n    })\n      .then(function (response) {\n        storeData(\"token\", response.data[\"token\"]);\n        Context.setIsSignedIn(true);\n        Context.setActivityVisible(false);\n      })\n      .catch(function (error) {\n        Context.setActivityVisible(false);\n        Context.setIsSignedIn(false);\n        if (error.response) {\n        } else if (error.request) {\n        } else {\n        }\n      });\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.input}>\n        <AppTextInput\n          title='username'\n          placeholder='Email'\n          onChangeText={(text) => setUsername(text)}\n          textContentType='emailAddress'\n          isValid={true}\n          autoCapitalize='none'\n          clearButtonMode='always'\n        />\n      </View>\n      <View style={styles.input}>\n        <AppTextInput\n          title='password'\n          placeholder='Password'\n          onChangeText={(text) => setPassword(text)}\n          textContentType='password'\n          secureTextEntry={true}\n          isValid={true}\n          clearButtonMode='always'\n        />\n      </View>\n      <View>\n        <AppButton\n          title='Login'\n          onPress={() => {\n            getApiToken(username, password);\n            Context.setActivityVisible(true);\n          }}\n        />\n      </View>\n      <ActivityModal visible={Context.activityVisibleValue}></ActivityModal>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingTop: 300,\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"100%\",\n  },\n  input: {\n    width: \"80%\",\n  },\n});\n\nexport default LoginScreen;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useContext } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { TouchableNativeFeedbackBase } from \"react-native-web/dist/index\";\nimport { STYLES } from \"../styles/styles\";\nimport AppTextInput from \"../components/AppTextInput\";\nimport api from \"../api/axiosConfig\";\nimport storeData from \"../asyncStorage/storeAsyncData\";\nimport removeAsyncData from \"../asyncStorage/removeAsyncData\";\nimport AppContext from \"../components/AppContext\";\nimport ActivityModal from \"../components/ActivityModal\";\nimport { Formik, validateYupSchema } from \"formik\";\nimport * as yup from \"yup\";\nimport AppText from \"../components/AppText\";\n\nfunction LoginScreen() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      passwordSecure = _useState2[0],\n      setPasswordSecure = _useState2[1];\n\n  var Context = useContext(AppContext);\n  var initialValues = {\n    username: \"\",\n    password: \"\"\n  };\n  var required = \"Required\";\n  var schema = yup.object().shape({\n    username: yup.string().email(\"Valid email required\").required(required),\n    password: yup.string().min(8, \"Min 8 characters\").required(required)\n  });\n\n  var getApiToken = function getApiToken(values) {\n    removeAsyncData(\"token\");\n    api({\n      method: \"post\",\n      url: \"/api/token-auth/\",\n      data: values\n    }).then(function (response) {\n      storeData(\"token\", response.data[\"token\"]);\n      Context.setIsSignedIn(true);\n      Context.setActivityVisible(false);\n    }).catch(function (error) {\n      Context.setActivityVisible(false);\n      Context.setIsSignedIn(false);\n\n      if (error.response) {} else if (error.request) {} else {}\n    });\n  };\n\n  return React.createElement(SafeAreaView, null, React.createElement(KeyboardAvoidingView, {\n    behavior: Platform.select({\n      android: undefined,\n      ios: \"position\"\n    }),\n    keyboardVerticalOffset: Platform.select({\n      ios: 90,\n      android: 78\n    }),\n    enabled: true\n  }, React.createElement(ScrollView, null, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: {\n      paddingTop: 100,\n      alignItems: \"center\"\n    }\n  }, React.createElement(Image, {\n    source: require(\"../assets/D2LB_LOGO_Dark_top.png\")\n  }), React.createElement(View, {\n    style: {\n      marginTop: 10\n    }\n  }, React.createElement(AppText, {\n    size: 18\n  }, \"No memory items. No limitations.\"))), React.createElement(View, {\n    style: {\n      paddingTop: 15\n    }\n  }, React.createElement(Formik, {\n    validateOnMount: false,\n    initialValues: initialValues,\n    validationSchema: schema,\n    onSubmit: function onSubmit(values, _ref) {\n      var setSubmitting = _ref.setSubmitting;\n      setTimeout(function () {\n        setSubmitting(false);\n        Context.setActivityVisible(true);\n      }, 400);\n    }\n  }, function (_ref2) {\n    var values = _ref2.values,\n        errors = _ref2.errors,\n        isValid = _ref2.isValid,\n        onSubmit = _ref2.onSubmit,\n        touched = _ref2.touched,\n        handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur;\n    return React.createElement(React.Fragment, null, React.createElement(AppTextInput, {\n      placeholder: \"email\",\n      autoCorrect: false,\n      autoCapitalize: \"none\",\n      keyboardType: \"default\",\n      clearButtonMode: \"while-editing\",\n      onChangeText: handleChange(\"username\"),\n      isValid: errors.username ? false : true,\n      onblur: handleBlur(\"username\")\n    }), React.createElement(View, null, errors.username ? React.createElement(Text, {\n      style: styles.errors\n    }, errors.username) : React.createElement(View, null)), React.createElement(AppTextInput, {\n      placeholder: \"password\",\n      autoCorrect: false,\n      autoCapitalize: \"none\",\n      keyboardType: \"default\",\n      clearButtonMode: \"while-editing\",\n      password: true,\n      onChangeText: handleChange(\"password\"),\n      isValid: errors.password ? false : true,\n      textContentType: \"password\",\n      secureTextEntry: passwordSecure,\n      onBlur: handleBlur(\"password\")\n    }), React.createElement(View, {\n      style: {\n        flexDirection: \"row\",\n        justifyContent: \"space-between\"\n      }\n    }, React.createElement(View, null, errors.password ? React.createElement(Text, {\n      style: styles.errors\n    }, errors.password) : React.createElement(View, null)), React.createElement(Pressable, {\n      onPress: function onPress() {\n        return setPasswordSecure(!passwordSecure);\n      }\n    }, passwordSecure ? React.createElement(AppText, {\n      color: \"gray\"\n    }, \"show\") : React.createElement(AppText, {\n      color: \"gray\"\n    }, \"hide\"))), React.createElement(View, {\n      style: {\n        marginTop: 10\n      }\n    }, isValid ? React.createElement(Button, {\n      title: !Context.setActivityVisible ? \"\" : \"Submit\",\n      onPress: function onPress() {\n        onSubmit;\n        getApiToken(values);\n        Context.setActivityVisible(true);\n      }\n    }) : React.createElement(Button, {\n      title: \"Complete required fields.\"\n    })));\n  })), React.createElement(ActivityModal, {\n    visible: Context.activityVisibleValue\n  })))));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: \"column\",\n    marginRight: 10,\n    marginLeft: 10\n  },\n  errors: {\n    color: STYLES.danger\n  }\n});\nexport default LoginScreen;","map":{"version":3,"names":["React","useState","useContext","TouchableNativeFeedbackBase","STYLES","AppTextInput","api","storeData","removeAsyncData","AppContext","ActivityModal","Formik","validateYupSchema","yup","AppText","LoginScreen","passwordSecure","setPasswordSecure","Context","initialValues","username","password","required","schema","object","shape","string","email","min","getApiToken","values","method","url","data","then","response","setIsSignedIn","setActivityVisible","catch","error","request","Platform","select","android","undefined","ios","styles","container","paddingTop","alignItems","require","marginTop","setSubmitting","setTimeout","errors","isValid","onSubmit","touched","handleChange","handleBlur","flexDirection","justifyContent","activityVisibleValue","StyleSheet","create","marginRight","marginLeft","color","danger"],"sources":["/Users/blake/react_native/d2lb/app/screens/LoginScreen.js"],"sourcesContent":["import React, { useState, useContext } from \"react\";\nimport {\n  View,\n  StyleSheet,\n  SafeAreaView,\n  Button,\n  Text,\n  Image,\n  KeyboardAvoidingView,\n  ScrollView,\n  Pressable,\n  TouchableNativeFeedbackBase,\n} from \"react-native\";\nimport { STYLES } from \"../styles/styles\";\nimport AppTextInput from \"../components/AppTextInput\";\nimport api from \"../api/axiosConfig\";\nimport storeData from \"../asyncStorage/storeAsyncData\";\nimport removeAsyncData from \"../asyncStorage/removeAsyncData\";\nimport AppContext from \"../components/AppContext\";\nimport ActivityModal from \"../components/ActivityModal\";\nimport { Formik, validateYupSchema } from \"formik\";\nimport * as yup from \"yup\";\nimport AppText from \"../components/AppText\";\n\nfunction LoginScreen() {\n  const [passwordSecure, setPasswordSecure] = useState(true);\n  const Context = useContext(AppContext);\n\n  const initialValues = {\n    username: \"\",\n    password: \"\",\n  };\n\n  const required = \"Required\";\n\n  let schema = yup.object().shape({\n    username: yup.string().email(\"Valid email required\").required(required),\n    password: yup.string().min(8, \"Min 8 characters\").required(required),\n  });\n\n  const getApiToken = (values) => {\n    removeAsyncData(\"token\");\n\n    api({\n      method: \"post\",\n      url: \"/api/token-auth/\",\n      data: values,\n    })\n      .then(function (response) {\n        storeData(\"token\", response.data[\"token\"]);\n        Context.setIsSignedIn(true);\n        Context.setActivityVisible(false);\n      })\n      .catch(function (error) {\n        Context.setActivityVisible(false);\n        Context.setIsSignedIn(false);\n        if (error.response) {\n        } else if (error.request) {\n        } else {\n        }\n      });\n  };\n\n  return (\n    <SafeAreaView>\n      <KeyboardAvoidingView\n        behavior={Platform.select({ android: undefined, ios: \"position\" })}\n        keyboardVerticalOffset={Platform.select({ ios: 90, android: 78 })}\n        enabled={true}\n      >\n        <ScrollView>\n          <View style={styles.container}>\n            <View style={{ paddingTop: 100, alignItems: \"center\" }}>\n              <Image\n                source={require(\"../assets/D2LB_LOGO_Dark_top.png\")}\n              ></Image>\n              <View style={{ marginTop: 10 }}>\n                <AppText size={18}>No memory items. No limitations.</AppText>\n              </View>\n            </View>\n            <View style={{ paddingTop: 15 }}>\n              <Formik\n                validateOnMount={false}\n                initialValues={initialValues}\n                validationSchema={schema}\n                onSubmit={(values, { setSubmitting }) => {\n                  setTimeout(() => {\n                    setSubmitting(false);\n                    Context.setActivityVisible(true);\n                  }, 400);\n                }}\n              >\n                {({\n                  values,\n                  errors,\n                  isValid,\n                  onSubmit,\n                  touched,\n                  handleChange,\n                  handleBlur,\n                }) => (\n                  <>\n                    <AppTextInput\n                      placeholder='email'\n                      autoCorrect={false}\n                      autoCapitalize={\"none\"}\n                      keyboardType={\"default\"}\n                      clearButtonMode={\"while-editing\"}\n                      onChangeText={handleChange(\"username\")}\n                      isValid={errors.username ? false : true}\n                      onblur={handleBlur(\"username\")}\n                    ></AppTextInput>\n                    <View>\n                      {errors.username ? (\n                        <Text style={styles.errors}>{errors.username}</Text>\n                      ) : (\n                        <View></View>\n                      )}\n                    </View>\n                    <AppTextInput\n                      placeholder='password'\n                      autoCorrect={false}\n                      autoCapitalize={\"none\"}\n                      keyboardType={\"default\"}\n                      clearButtonMode={\"while-editing\"}\n                      password={true}\n                      onChangeText={handleChange(\"password\")}\n                      isValid={errors.password ? false : true}\n                      textContentType='password'\n                      secureTextEntry={passwordSecure}\n                      onBlur={handleBlur(\"password\")}\n                    ></AppTextInput>\n                    <View\n                      style={{\n                        flexDirection: \"row\",\n                        justifyContent: \"space-between\",\n                      }}\n                    >\n                      <View>\n                        {errors.password ? (\n                          <Text style={styles.errors}>{errors.password}</Text>\n                        ) : (\n                          <View></View>\n                        )}\n                      </View>\n\n                      <Pressable\n                        onPress={() => setPasswordSecure(!passwordSecure)}\n                      >\n                        {passwordSecure ? (\n                          <AppText color='gray'>show</AppText>\n                        ) : (\n                          <AppText color='gray'>hide</AppText>\n                        )}\n                      </Pressable>\n                    </View>\n\n                    <View style={{ marginTop: 10 }}>\n                      {isValid ? (\n                        <Button\n                          title={!Context.setActivityVisible ? \"\" : \"Submit\"}\n                          onPress={() => {\n                            onSubmit;\n                            getApiToken(values);\n                            Context.setActivityVisible(true);\n                          }}\n                        ></Button>\n                      ) : (\n                        <Button title='Complete required fields.'></Button>\n                      )}\n                    </View>\n                  </>\n                )}\n              </Formik>\n            </View>\n            <ActivityModal\n              visible={Context.activityVisibleValue}\n            ></ActivityModal>\n          </View>\n        </ScrollView>\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flexDirection: \"column\", marginRight: 10, marginLeft: 10 },\n  errors: {\n    color: STYLES.danger,\n  },\n});\n\nexport default LoginScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
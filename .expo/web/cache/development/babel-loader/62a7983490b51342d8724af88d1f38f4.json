{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/blake/react_native/d2lb/app/components/Checkbox.js\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { STYLES } from \"../styles/styles\";\n\nfunction Checkbox(_ref) {\n  var _onPress = _ref.onPress,\n      isChecked = _ref.isChecked;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      checked = _useState2[0],\n      setChecked = _useState2[1];\n\n  var toggle = function toggle() {\n    setChecked(!checked);\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Pressable, {\n    onPress: function onPress() {\n      {\n        _onPress();\n      }\n      setChecked(true);\n      toggle();\n    }\n  }, React.createElement(View, {\n    style: {\n      height: 20,\n      width: 20,\n      backgroundColor: isChecked === true ? STYLES.blue : STYLES.white,\n      borderColor: STYLES.grey,\n      borderWidth: 1,\n      marginRight: 3,\n      borderRadius: STYLES.borderRadius\n    }\n  })));\n}\n\nvar styles = StyleSheet.create({\n  container: {}\n});\nexport default Checkbox;","map":{"version":3,"sources":["/Users/blake/react_native/d2lb/app/components/Checkbox.js"],"names":["React","useState","STYLES","Checkbox","onPress","isChecked","checked","setChecked","toggle","styles","container","height","width","backgroundColor","blue","white","borderColor","grey","borderWidth","marginRight","borderRadius","StyleSheet","create"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;AAEA,SAASC,MAAT;;AAEA,SAASC,QAAT,OAA0C;AAAA,MAAtBC,QAAsB,QAAtBA,OAAsB;AAAA,MAAbC,SAAa,QAAbA,SAAa;;AACxC,kBAA8BJ,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOK,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACnBD,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAFD;;AAIA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEG,MAAM,CAACC;AAApB,KACE,oBAAC,SAAD;AACE,IAAA,OAAO,EAAE,mBAAM;AACb;AACEN,QAAAA,QAAO;AACR;AACDG,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAC,MAAAA,MAAM;AACP;AAPH,KASE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLG,MAAAA,MAAM,EAAE,EADH;AAELC,MAAAA,KAAK,EAAE,EAFF;AAGLC,MAAAA,eAAe,EAAER,SAAS,KAAK,IAAd,GAAqBH,MAAM,CAACY,IAA5B,GAAmCZ,MAAM,CAACa,KAHtD;AAILC,MAAAA,WAAW,EAAEd,MAAM,CAACe,IAJf;AAKLC,MAAAA,WAAW,EAAE,CALR;AAMLC,MAAAA,WAAW,EAAE,CANR;AAOLC,MAAAA,YAAY,EAAElB,MAAM,CAACkB;AAPhB;AADT,IATF,CADF,CADF;AAyBD;;AAED,IAAMX,MAAM,GAAGY,UAAU,CAACC,MAAX,CAAkB;AAC/BZ,EAAAA,SAAS,EAAE;AADoB,CAAlB,CAAf;AAIA,eAAeP,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { View, StyleSheet, Pressable } from \"react-native\";\nimport { STYLES } from \"../styles/styles\";\n\nfunction Checkbox({ onPress, isChecked }) {\n  const [checked, setChecked] = useState(false);\n\n  const toggle = () => {\n    setChecked(!checked);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Pressable\n        onPress={() => {\n          {\n            onPress();\n          }\n          setChecked(true);\n          toggle();\n        }}\n      >\n        <View\n          style={{\n            height: 20,\n            width: 20,\n            backgroundColor: isChecked === true ? STYLES.blue : STYLES.white,\n            borderColor: STYLES.grey,\n            borderWidth: 1,\n            marginRight: 3,\n            borderRadius: STYLES.borderRadius,\n          }}\n        ></View>\n      </Pressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {},\n});\n\nexport default Checkbox;\n"]},"metadata":{},"sourceType":"module"}